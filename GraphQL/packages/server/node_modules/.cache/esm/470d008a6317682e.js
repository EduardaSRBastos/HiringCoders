let express,ApolloServer,ApolloServerPluginLandingPageGraphQLPlayground,typeDefs,resolvers;_631‍.w("express",[["default",["express"],function(v){express=v}]]);_631‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_631‍.w("apollo-server-core",[["ApolloServerPluginLandingPageGraphQLPlayground",["ApolloServerPluginLandingPageGraphQLPlayground"],function(v){ApolloServerPluginLandingPageGraphQLPlayground=v}]]);_631‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_631‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);





const app = express();

async function startServer() {
    const server = new ApolloServer({
        plugins: [
            ApolloServerPluginLandingPageGraphQLPlayground(),
        ],
        typeDefs,
        resolvers,
    });

    await server.start();

    server.applyMiddleware({
        app,
        cors: {
            origin: `http://${HOSTNAME}:3000`
        },
        bodyParserConfig: true,
    });
};

startServer(app);
app.listen(PORT, HOSTNAME, () => {
    console.log(`Server listening at ${HOSTNAME}:${PORT}.`);
});